name: Publish to MCP Registry

on:
  release:
    types: [published]

permissions:
  contents: read
  id-token: write  # Required for GitHub OIDC authentication with MCP registry

jobs:
  publish-to-mcp-registry:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Publishing version: $VERSION"

      - name: Update server.json with release version
        run: |
          VERSION=${{ steps.get_version.outputs.version }}
          jq --arg v "$VERSION" '.version = $v | .packages[0].version = $v' server.json > server.json.tmp
          mv server.json.tmp server.json
          cat server.json

      - name: Validate server.json
        run: |
          curl -sS https://static.modelcontextprotocol.io/schemas/2025-09-29/server.schema.json -o /tmp/server.schema.json
          # Basic JSON validation
          jq empty server.json
          echo "‚úì server.json is valid JSON"

      - name: Download MCP Publisher
        run: |
          VERSION="v1.1.0"
          OS=$(uname -s | tr '[:upper:]' '[:lower:]')
          ARCH=$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/')

          curl -L "https://github.com/modelcontextprotocol/registry/releases/download/${VERSION}/mcp-publisher_${VERSION#v}_${OS}_${ARCH}.tar.gz" | tar xz
          chmod +x mcp-publisher
          ./mcp-publisher --version

      - name: Login to MCP Registry
        run: |
          # Try GitHub OIDC first (preferred, no secrets needed)
          if ./mcp-publisher login github-oidc; then
            echo "‚úì Authenticated via GitHub OIDC"
          elif [ -n "${{ secrets.MCP_GITHUB_TOKEN }}" ]; then
            # Fallback to GitHub PAT if OIDC fails or org not detected
            echo "‚ö† OIDC failed, falling back to GitHub PAT"
            echo "${{ secrets.MCP_GITHUB_TOKEN }}" | ./mcp-publisher login github --token-stdin
          else
            echo "‚ùå Authentication failed. See RELEASE.md for setup instructions."
            exit 1
          fi

      - name: Publish to MCP Registry
        run: ./mcp-publisher publish

      - name: Summary
        run: |
          echo "‚úÖ Successfully published NCP v${{ steps.get_version.outputs.version }} to MCP Registry"
          echo "üì¶ Package: io.github.portel-dev/ncp"
          echo "üîó NPM: https://www.npmjs.com/package/@portel/ncp"
